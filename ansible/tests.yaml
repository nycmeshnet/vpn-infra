- name: Wireguard config tests
  hosts: 127.0.0.1
  vars:
    valid_property_names:
      - "NAME"
      - "PORT"
      - "PEER_PUBLIC_KEY"
      - "INTERFACE_ADDRESS"
      - "PEER_ALLOWED_IPS"
      - "PEER_PERSISTENT_KEEPALIVE"
      - "BFD_ENABLE"
      - "BFD_INTERVAL"
      - "BFD_MULTIPLIER"
      - "NEIGHBORS"
      - "TX_LENGTH"
      - "COST"
  tasks:
    - name: Load variables
      ansible.builtin.include_vars:
        file: "{{ env_file }}"

    - name: Gather count of wireguard configs
      ansible.builtin.debug:
        msg: "{{ wireguard_configs | list | length }}"
      register: wg_config_len

    - name: Check property names
      ansible.builtin.fail:
        msg: Unexpected property in config - {{ item.keys() | difference(valid_property_names) }}
      with_list: "{{ wireguard_configs | list }}"
      when: item.keys() | difference(valid_property_names) | length > 0

    - name: NAME property
      block:
        - name: Confirm names are unique
          ansible.builtin.fail:
            msg: The {{ wireguard_configs | list | length }} NAMEs in ansible/wireguard.yaml are not unique - {{ wireguard_configs | map(attribute='NAME') }}
          when: (wireguard_configs | map(attribute='NAME') | list | unique | length) < (wg_config_len | int)

        - name: Confirm names are valid
          ansible.builtin.fail:
            msg: One or more of the {{ wireguard_configs | list | length }} NAMEs in ansible/wireguard.yaml are not valid - {{ wireguard_configs | map(attribute='NAME') | select('match', '^[a-zA-Z0-9]{2,13}$') | list }}
          when: (wireguard_configs | map(attribute='NAME') | select('match', '^[a-zA-Z0-9]{2,13}$') | list | length) < (wg_config_len | int)

    - name: PORT property
      block:
        - name: Confirm port numbers are unique
          ansible.builtin.fail:
            msg: The {{ wireguard_configs | list | length }} PORT numbers in ansible/wireguard.yaml are not unique - {{ wireguard_configs | map(attribute='PORT') }}
          when: (wireguard_configs | map(attribute='PORT') | list | unique | length) < (wg_config_len | int)

        - name: Confirm port numbers are valid
          ansible.builtin.fail:
            msg: "One or more of the {{ wireguard_configs | list | length }} configs' PORT numbers are invalid"
          when: (wireguard_configs | map(attribute='PORT') | map('int') | select('>', 1024) | length) < (wg_config_len | int)

    - name: PEER_PUBLIC_KEY property
      block:
        - name: Confirm PEER_PUBLIC_KEY are unique
          ansible.builtin.fail:
            msg: The PEER_PUBLIC_KEY values in ansible/wireguard.yaml are not unique - {{ wireguard_configs | map(attribute='PEER_PUBLIC_KEY') }}
          when: (wireguard_configs | map(attribute='PEER_PUBLIC_KEY') | list | unique | length) < (wg_config_len | int)

        - name: Confirm PEER_PUBLIC_KEY are valid
          ansible.builtin.fail:
            msg: The PEER_PUBLIC_KEY values in ansible/wireguard.yaml are not valid - {{ wireguard_configs | map(attribute='PEER_PUBLIC_KEY') | reject('match', '^[A-Za-z0-9+/]{42}[AEIMQUYcgkosw480]=$') | list | string }}
          when: (wireguard_configs | map(attribute='PEER_PUBLIC_KEY') | select('match', '^[A-Za-z0-9+/]{42}[AEIMQUYcgkosw480]=$') | list | length) < (wg_config_len | int)

    - name: INTERFACE_ADDRESS property
      block:
        - name: INTERFACE_ADDRESS should be host/prefix
          ansible.builtin.fail:
            msg: "INTERFACE_ADDRESS should be in host/prefix format"
          when: (wireguard_configs | map(attribute='INTERFACE_ADDRESS', default='127.0.0.1') | ansible.utils.ipaddr('host/prefix') | list | length) < (wg_config_len | int)

        # - name: INTERFACE_ADDRESS should be within the allocated space
        #  ansible.builtin.fail:
        #    msg: "INTERFACE_ADDRESS should be in the allocated space"
        #  when: (wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | ansible.utils.reduce_on_network(expected_range) | list | length | string) != wg_config_len.msg

        # INTERFACE_ADDRESS in any CIDR
        - name: Build list of INTERFACE_ADDRESS values
          ansible.builtin.set_fact:
            _wg_iface_addrs: "{{ wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | list }}"

        - name: Compute INTERFACE_ADDRESS values present in any expected_range
          ansible.builtin.set_fact:
            _wg_iface_in_any: "{{ (_wg_iface_in_any | default([])) | union(_wg_iface_addrs | ansible.utils.reduce_on_network(item)) }}"
          loop: "{{ expected_range }}"

        - name: INTERFACE_ADDRESS should be within the allocated space
          ansible.builtin.fail:
            msg: "INTERFACE_ADDRESS should be in the allocated space. Offenders: {{ _wg_iface_addrs | difference(_wg_iface_in_any) }}"
          when: (_wg_iface_addrs | difference(_wg_iface_in_any) | length) > 0

        - name: INTERFACE_ADDRESS ranges should not overlap
          ansible.builtin.fail:
            msg: "Overlap in INTERFACE_ADDRESS: {{ item.0 }},{{ item.1 }} - {{ (wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | list)[item[0] | int],(wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | list)[item[1] | int] }}"
          with_nested:
            - "{{ range(1, (wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | length)) | list }}"
            - "{{ range(1, (wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | length)) | list }}"
          when: item[0] != item[1] and ((wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | list)[item[0] | int] | ansible.utils.network_in_usable((wireguard_configs | map(attribute='INTERFACE_ADDRESS', default=expected_default) | list)[item[1] | int]))

    - name: NEIGHBORS property
      block:
        - name: NEIGHBORS should be an IP
          ansible.builtin.fail:
            msg: "The NEIGHBORS variable needs to be set when configuring a remote OSPF hub. One or more configs are using the default."
          when: (wireguard_configs | map(attribute='NEIGHBORS', default='127.0.0.1') | ansible.utils.ipv4 | list | length) < (wg_config_len | int)

        # - name: NEIGHBORS should be within the allocated space
        #  ansible.builtin.fail:
        #    msg: "When set for remote hubs NEIGHBORS should be in the allocated space"
        #  when: (wireguard_configs | map(attribute='NEIGHBORS', default=expected_default) | ansible.utils.reduce_on_network(expected_range) | list | length | string) != wg_config_len.msg

        - name: Build list of NEIGHBORS values
          ansible.builtin.set_fact:
            _wg_neighbors_addrs: "{{ wireguard_configs | map(attribute='NEIGHBORS', default=expected_default) | list }}"

        - name: Compute NEIGHBORS values present in any expected_range
          ansible.builtin.set_fact:
            _wg_neighbors_in_any: "{{ (_wg_neighbors_in_any | default([])) | union(_wg_neighbors_addrs | ansible.utils.reduce_on_network(item)) }}"
          loop: "{{ expected_range }}"

        - name: NEIGHBORS should be within the allocated space
          ansible.builtin.fail:
            msg: "NEIGHBORS should be in the allocated space. Offenders: {{ _wg_neighbors_addrs | difference(_wg_neighbors_in_any) }}"
          when: (_wg_neighbors_addrs | difference(_wg_neighbors_in_any) | length) > 0


    - name: TX_LENGTH property
      block:
        - name: Valid mtu should be <= 1500
          ansible.builtin.fail:
            msg: "TX_LENGTH > 1500"
          when: (wireguard_configs | map(attribute='TX_LENGTH', default=0) | map('int') | select('>', 1500) | length) > 0

        - name: Valid mtu should be >100
          ansible.builtin.fail:
            msg: "TX_LENGTH <= 100"
          when: (wireguard_configs | map(attribute='TX_LENGTH', default=1500) | map('int') | select('<', 100) | length) > 0

    - name: COST property
      block:
        - name: Valid COST should be <= 65535
          ansible.builtin.fail:
            msg: "COST >= 65535"
          when: (wireguard_configs | map(attribute='COST', default=0) | map('int') | select('>', 65534) | length) > 0

        - name: Valid COST should be > 0
          ansible.builtin.fail:
            msg: "COST < 1"
          when: (wireguard_configs | map(attribute='COST', default=10) | map('int') | select('<', 1) | length) > 0
